{"version":3,"sources":["../node_modules/js-base64/base64.mjs","../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/browser.ts"],"names":["version","VERSION","_hasBuffer","_TD","_TE","b64ch","b64chs","b64tab","a","tab","c","i","b64re","_fromCC","_U8Afrom","it","_mkUriSafe","src","m0","_tidyB64","s","btoaPolyfill","bin","u32","c0","c1","c2","asc","pad","_btoa","_fromUint8Array","u8a","strs","l","fromUint8Array","urlsafe","cb_utob","cc","re_utob","utob","u","_encode","encode","encodeURI","re_btou","cb_btou","cccc","cp","offset","btou","b","atobPolyfill","u24","r1","r2","_atob","_toUint8Array","toUint8Array","_unURI","_decode","decode","isValid","_noEnum","v","extendString","_add","name","body","extendUint8Array","extendBuiltins","gBase64","MIMETextError","message","description","__publicField","Mailbox","input","config","arr","text","MIMEMessageHeader","envctx","skipEncodingPureASCII","randomstr","domain","obj","lines","field","isValueDefinedByUser","strval","memo","item","fieldMatcher","ind","value","data","dump","validProps","h","prop","MIMEMessageContentHeader","MIMEMessageContent","headers","eol","disposition","MIMEMessage","plaintext","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","inlineAttachments","boundary","msg","matcher","type","opts","encoding","contentId","charset","mailbox","recs","_input","createMimeMessage"],"mappings":"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","file":"browser.global.js","sourcesContent":["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","export class MIMETextError extends Error {\n    override name = ''\n    description = ''\n\n    constructor (message: string, description = '') {\n        super(description)\n\n        this.name = message\n        this.description = description\n    }\n}\n","import { MIMETextError } from './MIMETextError.js'\n\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\n    name = ''\n    addr = ''\n    type: MailboxType = 'To'\n\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\n        this.type = config.type\n\n        this.parse(input)\n    }\n\n    getAddrDomain (): string {\n        if (this.addr.includes('@')) {\n            const arr = this.addr.split('@')\n            if (arr.length > 1) return arr[1]!\n        }\n        return ''\n    }\n\n    dump (): string {\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\n    }\n\n    parse (input: MailboxAddrObject | string): this {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr\n            if (typeof input.name === 'string') this.name = input.name\n            if (typeof input.type === 'string') this.type = input.type\n            return this\n        }\n\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim()\n            if (text.startsWith('<') && text.endsWith('>')) {\n                this.addr = text.slice(1, -1)\n                return this\n            }\n            const arr = text.split(' <') as [string, string]\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n            arr[1] = arr[1].slice(0, -1)\n            this.name = arr[0]\n            this.addr = arr[1]\n            return this\n        }\n\n        if (typeof input === 'string') {\n            this.addr = input\n            return this\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\n    }\n\n    isMailboxAddrText (v: unknown): boolean {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\n    }\n\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface MailboxConfig {\n    type: MailboxType\n}\nexport interface MailboxAddrObject {\n    addr: string\n    name?: string\n    type?: MailboxType\n}\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\n","import type { EnvironmentContext } from './MIMEMessage'\nimport { MIMETextError } from './MIMETextError.js'\nimport { Mailbox } from './Mailbox.js'\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext\n    fields: HeaderField[] = [\n        {\n            name: 'Date',\n            generator: () => ((new Date()).toUTCString()).replace(/GMT|UTC/gi, '+0000')\n        },\n        {\n            name: 'From',\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Sender',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Reply-To',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'To',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Cc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Bcc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Message-ID',\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2)\n                const from = (this.fields.filter((obj) => obj.name === 'From')[0]!).value as Mailbox\n                const domain = from.getAddrDomain()\n                return '<' + randomstr + '@' + domain + '>'\n            }\n        },\n        {\n            name: 'Subject',\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === 'string' ? this.mimeEncodedWordUTF8IfNotAscii(v) : ''\n            }\n        },\n        {\n            name: 'MIME-Version',\n            generator: () => '1.0'\n        }\n    ]\n    skipEncodingPureASCII: boolean;\n\n    constructor (\n        envctx: EnvironmentContext,\n        { skipEncodingPureASCII = false } : { skipEncodingPureASCII?: boolean } = {}\n    ) {\n        this.envctx = envctx\n        this.skipEncodingPureASCII = skipEncodingPureASCII; \n    }\n\n    dump (): string {\n        let lines = ''\n\n        for (const field of this.fields) {\n            if (field.disabled) continue\n            const isValueDefinedByUser = field.value !== undefined && field.value !== null\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError('MIMETEXT_MISSING_HEADER', `The \"${field.name}\" header is required.`)\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== 'function') continue\n            if (!isValueDefinedByUser && typeof field.generator === 'function') field.value = field.generator()\n            const strval = Object.hasOwn(field, 'dump') && typeof field.dump === 'function'\n                ? field.dump(field.value)\n                : typeof field.value === 'string' ? field.value : ''\n            lines += `${field.name}: ${strval}${this.envctx.eol}`\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length)\n    }\n\n    toObject (): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value\n            return memo\n        }, {})\n    }\n\n    get (name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const ind = this.fields.findIndex(fieldMatcher)\n\n        return ind !== -1 ? (this.fields[ind]!).value : undefined\n    }\n\n    set (name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const isCustomHeader = !this.fields.some(fieldMatcher)\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher)\n            const field = this.fields[ind]!\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_VALUE', `The value for the header \"${name}\" is invalid.`)\n            }\n            (this.fields[ind]!).value = value\n            return this.fields[ind]!\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => typeof v === 'string' ? v : ''\n        })\n    }\n\n    setCustom (obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== 'string') {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Custom header must have a value.')\n            }\n            this.fields.push(obj)\n            return obj\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Invalid input for custom header. It must be in type of HeaderField.')\n    }\n\n    validateMailboxSingle (v: unknown): v is Mailbox {\n        return v instanceof Mailbox\n    }\n\n    validateMailboxMulti (v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v)\n    }\n\n    mimeEncodedWordUTF8IfNotAscii(data: string) {\n        // eslint-disable-next-line no-control-regex\n        const skipEncoding = this.skipEncodingPureASCII && /^[\\x00-\\x7F]*$/.test(data); // is pure ascii\n        return skipEncoding ? data : `=?utf-8?B?${this.envctx.toBase64(data)}?=`\n    }\n\n    dumpMailboxMulti (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `${this.mimeEncodedWordUTF8IfNotAscii(item.name)} <${item.addr}>`\n        return this.isArrayOfMailboxes(v) ? v.map(dump).join(`,${this.envctx.eol} `) : v instanceof Mailbox ? dump(v) : ''\n    }\n\n    dumpMailboxSingle (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `${this.mimeEncodedWordUTF8IfNotAscii(item.name)} <${item.addr}>`\n        return v instanceof Mailbox ? dump(v) : ''\n    }\n\n    isHeaderField (v: unknown): v is HeaderField {\n        const validProps = ['name', 'value', 'dump', 'required', 'disabled', 'generator', 'custom']\n        if (this.isObject(v)) {\n            const h = v as HeaderField\n            if (Object.hasOwn(h, 'name') && typeof h.name === 'string' && h.name.length > 0) {\n                if (!Object.keys(h).some((prop) => !validProps.includes(prop))) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n\n    isArrayOfMailboxes (v: unknown): v is Mailbox[] {\n        return this.isArray(v) && v.every((item: unknown) => item instanceof Mailbox)\n    }\n\n    isArray (v: unknown): v is never[] {\n        return (!!v) && (v.constructor === Array)\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: 'Content-ID'\n        },\n        {\n            name: 'Content-Type'\n        },\n        {\n            name: 'Content-Transfer-Encoding'\n        },\n        {\n            name: 'Content-Disposition'\n        }\n    ]\n\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor (envctx: EnvironmentContext) {\n        super(envctx)\n    }\n}\n\nexport type HeadersObject = Record<string, string | Mailbox | Mailbox[] | undefined>\nexport interface HeaderField {\n    name: string\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string\n    value?: string | Mailbox | Mailbox[] | undefined\n    validate?: (v: unknown) => boolean\n    required?: boolean\n    disabled?: boolean\n    generator?: () => string\n    custom?: boolean\n}\n","import type { EnvironmentContext } from './MIMEMessage'\nimport type { Mailbox } from './Mailbox'\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\n\nexport class MIMEMessageContent {\n    envctx: EnvironmentContext\n    headers\n    data\n\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageContentHeader(this.envctx)\n        this.data = data\n        this.setHeaders(headers)\n    }\n\n    dump (): string {\n        const eol = this.envctx.eol\n        return this.headers.dump() + eol + eol + this.data\n    }\n\n    isAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('attachment')\n    }\n\n    isInlineAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('inline')\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n}\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\n\nimport { MIMETextError } from './MIMETextError.js'\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\nimport { Mailbox } from './Mailbox.js'\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext\n    headers: MIMEMessageHeader\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\n    validTypes = ['text/html', 'text/plain']\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\n    messages: MIMEMessageContent[] = []\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageHeader(this.envctx)\n        this.messages = []\n\n        this.generateBoundaries()\n    }\n\n    asRaw (): string {\n        const eol = this.envctx.eol\n        const lines = this.headers.dump()\n\n        const plaintext = this.getMessageByType('text/plain')\n        const html = this.getMessageByType('text/html')\n        const primaryMessage = html ?? (plaintext ?? undefined)\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\n        }\n\n        const hasAttachments = this.hasAttachments()\n        const hasInlineAttachments = this.hasInlineAttachments()\n\n        const structure = hasInlineAttachments && hasAttachments\n            ? 'mixed+related'\n            : hasAttachments\n                ? 'mixed'\n                : hasInlineAttachments\n                    ? 'related'\n                    : plaintext && html\n                        ? 'alternative'\n                        : ''\n\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                '--' + this.boundaries.mixed + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--' + eol +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\n                (plaintext && html ? '' : eol) +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--'\n        } else if (structure === 'alternative') {\n            return lines + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else {\n            return lines + eol + primaryMessage.dump()\n        }\n    }\n\n    asEncoded (): string {\n        return this.envctx.toBase64WebSafe(this.asRaw())\n    }\n\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\n        const eol = this.envctx.eol\n        const primaryMessage = html ?? plaintext\n\n        let data = ''\n\n        if (plaintext && html && !this.hasInlineAttachments() && this.hasAttachments()) {\n            data = '--' + boundary + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                html.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else if (plaintext && html && this.hasInlineAttachments()) {\n            data = '--' + boundary + eol +\n                html.dump()\n        } else if (plaintext && html) {\n            data = '--' + boundary + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + boundary + eol +\n                html.dump()\n        } else {\n            data = '--' + boundary + eol +\n                (primaryMessage!).dump()\n        }\n\n        return data\n    }\n\n    hasInlineAttachments (): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment())\n    }\n\n    hasAttachments (): boolean {\n        return this.messages.some((msg) => msg.isAttachment())\n    }\n\n    getAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getInlineAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getMessageByType (type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\n    }\n\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\n        }\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const contentId = opts.headers['Content-ID']\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\n        }\n\n        const disposition = opts.inline ? 'inline' : 'attachment'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    addMessage (opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const charset = opts.charset ?? 'UTF-8'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\n\n        this.messages.push(msg)\n\n        return msg\n    }\n\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\n        const mailbox = new Mailbox(input, config)\n        this.setHeader('From', mailbox)\n        return mailbox\n    }\n\n    getSender (): Mailbox | undefined {\n        return this.getHeader('From') as Mailbox\n    }\n\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input\n        const recs = arr.map((_input) => new Mailbox(_input, config))\n        this.setHeader(config.type, recs)\n        return recs\n    }\n\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\n    }\n\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setSubject (value: string): string {\n        this.setHeader('subject', value)\n        return value\n    }\n\n    getSubject (): string | undefined {\n        return this.getHeader('subject') as string\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n\n    toBase64 (v: string): string {\n        return this.envctx.toBase64(v)\n    }\n\n    toBase64WebSafe (v: string): string {\n        return this.envctx.toBase64WebSafe(v)\n    }\n\n    generateBoundaries (): void {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        }\n    }\n\n    isArray (v: unknown): v is unknown[] {\n        return (!!v) && (v.constructor === Array)\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string\n    toBase64WebSafe: (v: string) => string\n    eol: string\n    validateContentType: (v: string) => string | false\n}\n\nexport interface Boundaries {\n    mixed: string\n    alt: string\n    related: string\n}\n\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\n\nexport interface ContentHeaders {\n    'Content-Type'?: string\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\n    'Content-Disposition'?: string\n    'Content-ID'?: string\n    [index: string]: string | undefined\n}\n\nexport interface ContentOptions {\n    data: string\n    encoding?: ContentTransferEncoding\n    contentType: string\n    headers?: ContentHeaders\n    charset?: string\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean\n    filename: string\n}\n","import { Base64 } from 'js-base64'\nimport { MIMEMessage } from '../MIMEMessage.js'\n\nconst envctx = {\n    toBase64: function toBase64 (data: string) {\n        return Base64.encode(data)\n    },\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\n        return Base64.encodeURI(data)\n    },\n    eol: '\\r\\n',\n    validateContentType: (v: string): string | false => {\n        return v.length > 0 ? v : false\n    }\n}\n\nexport function createMimeMessage (): MIMEMessage {\n    return new MIMEMessage(envctx)\n}\n\nexport { MIMEMessage } from '../MIMEMessage.js'\nexport { Mailbox } from '../Mailbox.js'\nexport { MIMETextError } from '../MIMETextError.js'\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\n\nexport type * from '../MIMEMessage.js'\nexport type * from '../Mailbox.js'\nexport type * from '../MIMETextError.js'\nexport type * from '../MIMEMessageHeader.js'\nexport type * from '../MIMEMessageContent.js'\n"]}