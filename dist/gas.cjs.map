{"version":3,"sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/gas.ts"],"names":["MIMETextError","message","description","__publicField","Mailbox","input","config","arr","text","v","MIMEMessageHeader","envctx","skipEncodingPureASCII","randomstr","domain","obj","lines","field","isValueDefinedByUser","strval","memo","item","name","fieldMatcher","ind","value","data","trailingString","dump","validProps","h","prop","MIMEMessageContentHeader","MIMEMessageContent","headers","eol","disposition","MIMEMessage","plaintext","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","a","inlineAttachments","boundary","msg","matcher","type","opts","encoding","contentId","charset","mailbox","recs","_input","createMimeMessage"],"mappings":"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","file":"gas.cjs","sourcesContent":["export class MIMETextError extends Error {\n    override name = ''\n    description = ''\n\n    constructor (message: string, description = '') {\n        super(description)\n\n        this.name = message\n        this.description = description\n    }\n}\n","import { MIMETextError } from './MIMETextError.js'\n\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\n    name = ''\n    addr = ''\n    type: MailboxType = 'To'\n\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\n        this.type = config.type\n\n        this.parse(input)\n    }\n\n    getAddrDomain (): string {\n        if (this.addr.includes('@')) {\n            const arr = this.addr.split('@')\n            if (arr.length > 1) return arr[1]!\n        }\n        return ''\n    }\n\n    dump (): string {\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\n    }\n\n    parse (input: MailboxAddrObject | string): this {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr\n            if (typeof input.name === 'string') this.name = input.name\n            if (typeof input.type === 'string') this.type = input.type\n            return this\n        }\n\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim()\n            if (text.startsWith('<') && text.endsWith('>')) {\n                this.addr = text.slice(1, -1)\n                return this\n            }\n            const arr = text.split(' <') as [string, string]\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n            arr[1] = arr[1].slice(0, -1)\n            this.name = arr[0]\n            this.addr = arr[1]\n            return this\n        }\n\n        if (typeof input === 'string') {\n            this.addr = input\n            return this\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\n    }\n\n    isMailboxAddrText (v: unknown): boolean {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\n    }\n\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface MailboxConfig {\n    type: MailboxType\n}\nexport interface MailboxAddrObject {\n    addr: string\n    name?: string\n    type?: MailboxType\n}\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\n","import type { EnvironmentContext } from './MIMEMessage'\nimport { MIMETextError } from './MIMETextError.js'\nimport { Mailbox } from './Mailbox.js'\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext\n    fields: HeaderField[] = [\n        {\n            name: 'Date',\n            generator: () => ((new Date()).toUTCString()).replace(/GMT|UTC/gi, '+0000')\n        },\n        {\n            name: 'From',\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Sender',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Reply-To',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'To',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Cc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Bcc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Message-ID',\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2)\n                const from = (this.fields.filter((obj) => obj.name === 'From')[0]!).value as Mailbox\n                const domain = from.getAddrDomain()\n                return '<' + randomstr + '@' + domain + '>'\n            }\n        },\n        {\n            name: 'Subject',\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === 'string' ? this.mimeEncodedWordUTF8IfNotAscii(v, '') : ''\n            }\n        },\n        {\n            name: 'MIME-Version',\n            generator: () => '1.0'\n        }\n    ]\n    skipEncodingPureASCII: boolean;\n\n    constructor (\n        envctx: EnvironmentContext,\n        { skipEncodingPureASCII = false } : { skipEncodingPureASCII?: boolean } = {}\n    ) {\n        this.envctx = envctx\n        this.skipEncodingPureASCII = skipEncodingPureASCII; \n    }\n\n    dump (): string {\n        let lines = ''\n\n        for (const field of this.fields) {\n            if (field.disabled) continue\n            const isValueDefinedByUser = field.value !== undefined && field.value !== null\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError('MIMETEXT_MISSING_HEADER', `The \"${field.name}\" header is required.`)\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== 'function') continue\n            if (!isValueDefinedByUser && typeof field.generator === 'function') field.value = field.generator()\n            const strval = Object.hasOwn(field, 'dump') && typeof field.dump === 'function'\n                ? field.dump(field.value)\n                : typeof field.value === 'string' ? field.value : ''\n            lines += `${field.name}: ${strval}${this.envctx.eol}`\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length)\n    }\n\n    toObject (): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value\n            return memo\n        }, {})\n    }\n\n    get (name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const ind = this.fields.findIndex(fieldMatcher)\n\n        return ind !== -1 ? (this.fields[ind]!).value : undefined\n    }\n\n    set (name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const isCustomHeader = !this.fields.some(fieldMatcher)\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher)\n            const field = this.fields[ind]!\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_VALUE', `The value for the header \"${name}\" is invalid.`)\n            }\n            (this.fields[ind]!).value = value\n            return this.fields[ind]!\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => typeof v === 'string' ? v : ''\n        })\n    }\n\n    setCustom (obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== 'string') {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Custom header must have a value.')\n            }\n            this.fields.push(obj)\n            return obj\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Invalid input for custom header. It must be in type of HeaderField.')\n    }\n\n    validateMailboxSingle (v: unknown): v is Mailbox {\n        return v instanceof Mailbox\n    }\n\n    validateMailboxMulti (v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v)\n    }\n\n    mimeEncodedWordUTF8IfNotAscii(data: string, trailingString: string) {\n        // eslint-disable-next-line no-control-regex\n        const skipEncoding = this.skipEncodingPureASCII && /^[\\x00-\\x7F]*$/.test(data); // is pure ascii\n        const converted = skipEncoding ? data : `=?utf-8?B?${this.envctx.toBase64(data)}?=`\n        return converted + trailingString;\n    }\n\n    dumpMailboxMulti (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `${this.mimeEncodedWordUTF8IfNotAscii(item.name, ' ')}<${item.addr}>`\n        return this.isArrayOfMailboxes(v) ? v.map(dump).join(`,${this.envctx.eol} `) : v instanceof Mailbox ? dump(v) : ''\n    }\n\n    dumpMailboxSingle (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `${this.mimeEncodedWordUTF8IfNotAscii(item.name, ' ')}<${item.addr}>`\n        return v instanceof Mailbox ? dump(v) : ''\n    }\n\n    isHeaderField (v: unknown): v is HeaderField {\n        const validProps = ['name', 'value', 'dump', 'required', 'disabled', 'generator', 'custom']\n        if (this.isObject(v)) {\n            const h = v as HeaderField\n            if (Object.hasOwn(h, 'name') && typeof h.name === 'string' && h.name.length > 0) {\n                if (!Object.keys(h).some((prop) => !validProps.includes(prop))) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n\n    isArrayOfMailboxes (v: unknown): v is Mailbox[] {\n        return this.isArray(v) && v.every((item: unknown) => item instanceof Mailbox)\n    }\n\n    isArray (v: unknown): v is never[] {\n        return (!!v) && (v.constructor === Array)\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: 'Content-ID'\n        },\n        {\n            name: 'Content-Type'\n        },\n        {\n            name: 'Content-Transfer-Encoding'\n        },\n        {\n            name: 'Content-Disposition'\n        }\n    ]\n\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor (envctx: EnvironmentContext) {\n        super(envctx)\n    }\n}\n\nexport type HeadersObject = Record<string, string | Mailbox | Mailbox[] | undefined>\nexport interface HeaderField {\n    name: string\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string\n    value?: string | Mailbox | Mailbox[] | undefined\n    validate?: (v: unknown) => boolean\n    required?: boolean\n    disabled?: boolean\n    generator?: () => string\n    custom?: boolean\n}\n","import type { EnvironmentContext } from './MIMEMessage'\nimport type { Mailbox } from './Mailbox'\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\n\nexport class MIMEMessageContent {\n    envctx: EnvironmentContext\n    headers\n    data\n\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageContentHeader(this.envctx)\n        this.data = data\n        this.setHeaders(headers)\n    }\n\n    dump (): string {\n        const eol = this.envctx.eol\n        return this.headers.dump() + eol + eol + this.data\n    }\n\n    isAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('attachment')\n    }\n\n    isInlineAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('inline')\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n}\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\n\nimport { MIMETextError } from './MIMETextError.js'\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\nimport { Mailbox } from './Mailbox.js'\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext\n    headers: MIMEMessageHeader\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\n    validTypes = ['text/html', 'text/plain']\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\n    messages: MIMEMessageContent[] = []\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageHeader(this.envctx)\n        this.messages = []\n\n        this.generateBoundaries()\n    }\n\n    asRaw (): string {\n        const eol = this.envctx.eol\n        const lines = this.headers.dump()\n\n        const plaintext = this.getMessageByType('text/plain')\n        const html = this.getMessageByType('text/html')\n        const primaryMessage = html ?? (plaintext ?? undefined)\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\n        }\n\n        const hasAttachments = this.hasAttachments()\n        const hasInlineAttachments = this.hasInlineAttachments()\n\n        const structure = hasInlineAttachments && hasAttachments\n            ? 'mixed+related'\n            : hasAttachments\n                ? 'mixed'\n                : hasInlineAttachments\n                    ? 'related'\n                    : plaintext && html\n                        ? 'alternative'\n                        : ''\n\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                '--' + this.boundaries.mixed + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--' + eol +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\n                (plaintext && html ? '' : eol) +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--'\n        } else if (structure === 'alternative') {\n            return lines + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else {\n            return lines + eol + primaryMessage.dump()\n        }\n    }\n\n    asEncoded (): string {\n        return this.envctx.toBase64WebSafe(this.asRaw())\n    }\n\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\n        const eol = this.envctx.eol\n        const primaryMessage = html ?? plaintext\n\n        let data = ''\n\n        if (plaintext && html && !this.hasInlineAttachments() && this.hasAttachments()) {\n            data = '--' + boundary + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                html.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else if (plaintext && html && this.hasInlineAttachments()) {\n            data = '--' + boundary + eol +\n                html.dump()\n        } else if (plaintext && html) {\n            data = '--' + boundary + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + boundary + eol +\n                html.dump()\n        } else {\n            data = '--' + boundary + eol +\n                (primaryMessage!).dump()\n        }\n\n        return data\n    }\n\n    hasInlineAttachments (): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment())\n    }\n\n    hasAttachments (): boolean {\n        return this.messages.some((msg) => msg.isAttachment())\n    }\n\n    getAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getInlineAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getMessageByType (type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\n    }\n\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\n        }\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const contentId = opts.headers['Content-ID']\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\n        }\n\n        const disposition = opts.inline ? 'inline' : 'attachment'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    addMessage (opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const charset = opts.charset ?? 'UTF-8'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\n\n        this.messages.push(msg)\n\n        return msg\n    }\n\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\n        const mailbox = new Mailbox(input, config)\n        this.setHeader('From', mailbox)\n        return mailbox\n    }\n\n    getSender (): Mailbox | undefined {\n        return this.getHeader('From') as Mailbox\n    }\n\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input\n        const recs = arr.map((_input) => new Mailbox(_input, config))\n        this.setHeader(config.type, recs)\n        return recs\n    }\n\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\n    }\n\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setSubject (value: string): string {\n        this.setHeader('subject', value)\n        return value\n    }\n\n    getSubject (): string | undefined {\n        return this.getHeader('subject') as string\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n\n    toBase64 (v: string): string {\n        return this.envctx.toBase64(v)\n    }\n\n    toBase64WebSafe (v: string): string {\n        return this.envctx.toBase64WebSafe(v)\n    }\n\n    generateBoundaries (): void {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        }\n    }\n\n    isArray (v: unknown): v is unknown[] {\n        return (!!v) && (v.constructor === Array)\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string\n    toBase64WebSafe: (v: string) => string\n    eol: string\n    validateContentType: (v: string) => string | false\n}\n\nexport interface Boundaries {\n    mixed: string\n    alt: string\n    related: string\n}\n\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\n\nexport interface ContentHeaders {\n    'Content-Type'?: string\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\n    'Content-Disposition'?: string\n    'Content-ID'?: string\n    [index: string]: string | undefined\n}\n\nexport interface ContentOptions {\n    data: string\n    encoding?: ContentTransferEncoding\n    contentType: string\n    headers?: ContentHeaders\n    charset?: string\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean\n    filename: string\n}\n","import { MIMEMessage } from '../MIMEMessage.js'\n\nconst envctx = {\n    toBase64: function toBase64 (data: string) {\n        return Utilities.base64Encode(data, Utilities.Charset.UTF_8)\n    },\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\n        return Utilities.base64EncodeWebSafe(data)\n    },\n    eol: '\\r\\n',\n    validateContentType: (v: string): string | false => {\n        return v.length > 0 ? v : false\n    }\n}\n\nexport function createMimeMessage (): MIMEMessage {\n    return new MIMEMessage(envctx)\n}\n\nexport { MIMEMessage } from '../MIMEMessage.js'\nexport { Mailbox } from '../Mailbox.js'\nexport { MIMETextError } from '../MIMETextError.js'\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\n\nexport type * from '../MIMEMessage.js'\nexport type * from '../Mailbox.js'\nexport type * from '../MIMETextError.js'\nexport type * from '../MIMEMessageHeader.js'\nexport type * from '../MIMEMessageContent.js'\n"]}