{"version":3,"sources":["../src/entrypoints/node.ts","../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts"],"names":["MIMETextError","message","description","__publicField","Mailbox","input","config","arr","text","v","MIMEMessageHeader","envctx","options","randomstr","domain","obj","lines","field","isValueDefinedByUser","strval","memo","item","name","fieldMatcher","ind","value","data","dump","validProps","h","prop","MIMEMessageContentHeader","MIMEMessageContent","headers","eol","disposition","MIMEMessage","plaintext","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","a","inlineAttachments","boundary","msg","matcher","type","opts","encoding","contentId","charset","mailbox","recs","_input","EOL","E","createMimeMessage"],"mappings":"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","file":"node.cjs","sourcesContent":["import { EOL } from 'node:os'\nimport * as mime from 'mime-types'\nimport { MIMEMessage, MIMEMessageOptions } from '../MIMEMessage.js'\n\nconst envctx = {\n    toBase64: function toBase64 (data: string) {\n        return (Buffer.from(data)).toString('base64')\n    },\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\n        return (Buffer.from(data)).toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=+$/, '')\n    },\n    eol: EOL,\n    validateContentType: (v: string): string | false => {\n        return mime.contentType(v)\n    }\n}\n\nexport function createMimeMessage (options: MIMEMessageOptions = { skipEncodingPureAsciiHeaders: false }): MIMEMessage {\n    return new MIMEMessage(envctx, options)\n}\n\nexport { MIMEMessage } from '../MIMEMessage.js'\nexport { Mailbox } from '../Mailbox.js'\nexport { MIMETextError } from '../MIMETextError.js'\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\n\nexport type * from '../MIMEMessage.js'\nexport type * from '../Mailbox.js'\nexport type * from '../MIMETextError.js'\nexport type * from '../MIMEMessageHeader.js'\nexport type * from '../MIMEMessageContent.js'\n","export class MIMETextError extends Error {\n    override name = ''\n    description = ''\n\n    constructor (message: string, description = '') {\n        super(description)\n\n        this.name = message\n        this.description = description\n    }\n}\n","import { MIMETextError } from './MIMETextError.js'\n\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\n    name = ''\n    addr = ''\n    type: MailboxType = 'To'\n\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\n        this.type = config.type\n\n        this.parse(input)\n    }\n\n    getAddrDomain (): string {\n        if (this.addr.includes('@')) {\n            const arr = this.addr.split('@')\n            if (arr.length > 1) return arr[1]!\n        }\n        return ''\n    }\n\n    dump (): string {\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\n    }\n\n    parse (input: MailboxAddrObject | string): this {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr\n            if (typeof input.name === 'string') this.name = input.name\n            if (typeof input.type === 'string') this.type = input.type\n            return this\n        }\n\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim()\n            if (text.startsWith('<') && text.endsWith('>')) {\n                this.addr = text.slice(1, -1)\n                return this\n            }\n            const arr = text.split(' <') as [string, string]\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n            arr[1] = arr[1].slice(0, -1)\n            this.name = arr[0]\n            this.addr = arr[1]\n            return this\n        }\n\n        if (typeof input === 'string') {\n            this.addr = input\n            return this\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\n    }\n\n    isMailboxAddrText (v: unknown): boolean {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\n    }\n\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface MailboxConfig {\n    type: MailboxType\n}\nexport interface MailboxAddrObject {\n    addr: string\n    name?: string\n    type?: MailboxType\n}\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\n","import type { EnvironmentContext, MIMEMessageOptions } from './MIMEMessage'\nimport { MIMETextError } from './MIMETextError.js'\nimport { Mailbox } from './Mailbox.js'\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext\n    skipEncodingPureAsciiHeaders: boolean\n    fields: HeaderField[] = [\n        {\n            name: 'Date',\n            generator: () => ((new Date()).toUTCString()).replace(/GMT|UTC/gi, '+0000')\n        },\n        {\n            name: 'From',\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Sender',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Reply-To',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'To',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Cc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Bcc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Message-ID',\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2)\n                const from = (this.fields.filter((obj) => obj.name === 'From')[0]!).value as Mailbox\n                const domain = from.getAddrDomain()\n                return '<' + randomstr + '@' + domain + '>'\n            }\n        },\n        {\n            name: 'Subject',\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === 'string' ? this.optionallySkipPureAsciiEncoding(v) : ''\n            }\n        },\n        {\n            name: 'MIME-Version',\n            generator: () => '1.0'\n        }\n    ]\n\n    constructor (envctx: EnvironmentContext, options : MIMEMessageOptions = { skipEncodingPureAsciiHeaders: false}) {\n        this.envctx = envctx\n        this.skipEncodingPureAsciiHeaders = options.skipEncodingPureAsciiHeaders;\n    }\n\n    dump (): string {\n        let lines = ''\n\n        for (const field of this.fields) {\n            if (field.disabled) continue\n            const isValueDefinedByUser = field.value !== undefined && field.value !== null\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError('MIMETEXT_MISSING_HEADER', `The \"${field.name}\" header is required.`)\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== 'function') continue\n            if (!isValueDefinedByUser && typeof field.generator === 'function') field.value = field.generator()\n            const strval = Object.hasOwn(field, 'dump') && typeof field.dump === 'function'\n                ? field.dump(field.value)\n                : typeof field.value === 'string' ? field.value : ''\n            lines += `${field.name}: ${strval}${this.envctx.eol}`\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length)\n    }\n\n    toObject (): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value\n            return memo\n        }, {})\n    }\n\n    get (name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const ind = this.fields.findIndex(fieldMatcher)\n\n        return ind !== -1 ? (this.fields[ind]!).value : undefined\n    }\n\n    set (name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const isCustomHeader = !this.fields.some(fieldMatcher)\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher)\n            const field = this.fields[ind]!\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_VALUE', `The value for the header \"${name}\" is invalid.`)\n            }\n            (this.fields[ind]!).value = value\n            return this.fields[ind]!\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => typeof v === 'string' ? v : ''\n        })\n    }\n\n    setCustom (obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== 'string') {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Custom header must have a value.')\n            }\n            this.fields.push(obj)\n            return obj\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Invalid input for custom header. It must be in type of HeaderField.')\n    }\n\n    validateMailboxSingle (v: unknown): v is Mailbox {\n        return v instanceof Mailbox\n    }\n\n    validateMailboxMulti (v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v)\n    }\n\n    optionallySkipPureAsciiEncoding(data: string) {\n        // eslint-disable-next-line no-control-regex\n        const skipEncoding = this.skipEncodingPureAsciiHeaders && /^[\\x00-\\x7F]*$/.test(data); // is pure ascii\n        return skipEncoding ? data : `=?utf-8?B?${this.envctx.toBase64(data)}?=`\n    }\n\n    dumpMailboxMulti (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `${this.optionallySkipPureAsciiEncoding(item.name)} <${item.addr}>`\n        return this.isArrayOfMailboxes(v) ? v.map(dump).join(`,${this.envctx.eol} `) : v instanceof Mailbox ? dump(v) : ''\n    }\n\n    dumpMailboxSingle (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `${this.optionallySkipPureAsciiEncoding(item.name)} <${item.addr}>`\n        return v instanceof Mailbox ? dump(v) : ''\n    }\n\n    isHeaderField (v: unknown): v is HeaderField {\n        const validProps = ['name', 'value', 'dump', 'required', 'disabled', 'generator', 'custom']\n        if (this.isObject(v)) {\n            const h = v as HeaderField\n            if (Object.hasOwn(h, 'name') && typeof h.name === 'string' && h.name.length > 0) {\n                if (!Object.keys(h).some((prop) => !validProps.includes(prop))) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n\n    isArrayOfMailboxes (v: unknown): v is Mailbox[] {\n        return this.isArray(v) && v.every((item: unknown) => item instanceof Mailbox)\n    }\n\n    isArray (v: unknown): v is never[] {\n        return (!!v) && (v.constructor === Array)\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: 'Content-ID'\n        },\n        {\n            name: 'Content-Type'\n        },\n        {\n            name: 'Content-Transfer-Encoding'\n        },\n        {\n            name: 'Content-Disposition'\n        }\n    ]\n\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor (envctx: EnvironmentContext) {\n        super(envctx)\n    }\n}\n\nexport type HeadersObject = Record<string, string | Mailbox | Mailbox[] | undefined>\nexport interface HeaderField {\n    name: string\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string\n    value?: string | Mailbox | Mailbox[] | undefined\n    validate?: (v: unknown) => boolean\n    required?: boolean\n    disabled?: boolean\n    generator?: () => string\n    custom?: boolean\n}\n","import type { EnvironmentContext } from './MIMEMessage'\nimport type { Mailbox } from './Mailbox'\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\n\nexport class MIMEMessageContent {\n    envctx: EnvironmentContext\n    headers\n    data\n\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageContentHeader(this.envctx)\n        this.data = data\n        this.setHeaders(headers)\n    }\n\n    dump (): string {\n        const eol = this.envctx.eol\n        return this.headers.dump() + eol + eol + this.data\n    }\n\n    isAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('attachment')\n    }\n\n    isInlineAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('inline')\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n}\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\n\nimport { MIMETextError } from './MIMETextError.js'\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\nimport { Mailbox } from './Mailbox.js'\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\n\nexport interface MIMEMessageOptions {\n    skipEncodingPureAsciiHeaders: boolean\n}\nexport class MIMEMessage {\n    envctx: EnvironmentContext\n    headers: MIMEMessageHeader\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\n    validTypes = ['text/html', 'text/plain']\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\n    messages: MIMEMessageContent[] = []\n\n    constructor (\n        envctx: EnvironmentContext, \n        options :  MIMEMessageOptions = { skipEncodingPureAsciiHeaders: false }\n    ) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageHeader(this.envctx, options)\n        this.messages = []\n\n        this.generateBoundaries()\n    }\n\n    asRaw (): string {\n        const eol = this.envctx.eol\n        const lines = this.headers.dump()\n\n        const plaintext = this.getMessageByType('text/plain')\n        const html = this.getMessageByType('text/html')\n        const primaryMessage = html ?? (plaintext ?? undefined)\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\n        }\n\n        const hasAttachments = this.hasAttachments()\n        const hasInlineAttachments = this.hasInlineAttachments()\n\n        const structure = hasInlineAttachments && hasAttachments\n            ? 'mixed+related'\n            : hasAttachments\n                ? 'mixed'\n                : hasInlineAttachments\n                    ? 'related'\n                    : plaintext && html\n                        ? 'alternative'\n                        : ''\n\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                '--' + this.boundaries.mixed + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--' + eol +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\n                (plaintext && html ? '' : eol) +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--'\n        } else if (structure === 'alternative') {\n            return lines + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else {\n            return lines + eol + primaryMessage.dump()\n        }\n    }\n\n    asEncoded (): string {\n        return this.envctx.toBase64WebSafe(this.asRaw())\n    }\n\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\n        const eol = this.envctx.eol\n        const primaryMessage = html ?? plaintext\n\n        let data = ''\n\n        if (plaintext && html && !this.hasInlineAttachments() && this.hasAttachments()) {\n            data = '--' + boundary + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                html.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else if (plaintext && html && this.hasInlineAttachments()) {\n            data = '--' + boundary + eol +\n                html.dump()\n        } else if (plaintext && html) {\n            data = '--' + boundary + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + boundary + eol +\n                html.dump()\n        } else {\n            data = '--' + boundary + eol +\n                (primaryMessage!).dump()\n        }\n\n        return data\n    }\n\n    hasInlineAttachments (): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment())\n    }\n\n    hasAttachments (): boolean {\n        return this.messages.some((msg) => msg.isAttachment())\n    }\n\n    getAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getInlineAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getMessageByType (type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\n    }\n\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\n        }\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const contentId = opts.headers['Content-ID']\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\n        }\n\n        const disposition = opts.inline ? 'inline' : 'attachment'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    addMessage (opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const charset = opts.charset ?? 'UTF-8'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\n\n        this.messages.push(msg)\n\n        return msg\n    }\n\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\n        const mailbox = new Mailbox(input, config)\n        this.setHeader('From', mailbox)\n        return mailbox\n    }\n\n    getSender (): Mailbox | undefined {\n        return this.getHeader('From') as Mailbox\n    }\n\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input\n        const recs = arr.map((_input) => new Mailbox(_input, config))\n        this.setHeader(config.type, recs)\n        return recs\n    }\n\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\n    }\n\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setSubject (value: string): string {\n        this.setHeader('subject', value)\n        return value\n    }\n\n    getSubject (): string | undefined {\n        return this.getHeader('subject') as string\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n\n    toBase64 (v: string): string {\n        return this.envctx.toBase64(v)\n    }\n\n    toBase64WebSafe (v: string): string {\n        return this.envctx.toBase64WebSafe(v)\n    }\n\n    generateBoundaries (): void {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        }\n    }\n\n    isArray (v: unknown): v is unknown[] {\n        return (!!v) && (v.constructor === Array)\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string\n    toBase64WebSafe: (v: string) => string\n    eol: string\n    validateContentType: (v: string) => string | false\n    skipEncodingPureAsciiHeaders?: boolean\n}\n\nexport interface Boundaries {\n    mixed: string\n    alt: string\n    related: string\n}\n\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\n\nexport interface ContentHeaders {\n    'Content-Type'?: string\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\n    'Content-Disposition'?: string\n    'Content-ID'?: string\n    [index: string]: string | undefined\n}\n\nexport interface ContentOptions {\n    data: string\n    encoding?: ContentTransferEncoding\n    contentType: string\n    headers?: ContentHeaders\n    charset?: string\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean\n    filename: string\n}\n"]}